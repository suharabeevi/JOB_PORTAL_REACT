{"version":3,"file":"static/js/210.4ca1e89c.chunk.js","mappings":"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","sources":["Components/Header/CommonHeader.tsx","features/axios/api/employer/employerAuthentication.ts","Components/Employer/EmployerAuth/EmployerLogin.tsx","pages/employer/EmployerLoginPage.tsx","Components/Employer/EmployerAuth/EmailVerify.tsx","pages/employer/EmailVerifyPage.tsx","Components/Employer/EmployerAuth/EmployerRegister.tsx","pages/employer/EmployerRegisterPage.tsx","Components/Employer/EmployerAuth/EmailOTP.tsx","pages/employer/EmailOTPPage.tsx","routes/employer/EmployerRouter.tsx","utils/validation.ts"],"sourcesContent":["import React from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport { Disclosure } from \"@headlessui/react\";\r\nimport { Bars3Icon, XMarkIcon } from \"@heroicons/react/24/outline\";\r\nimport { Link } from \"react-router-dom\";\r\nconst navigation = [\r\n    { name: \"Employer Login\", href: \"employer/login\", current: false },\r\n    { name: \"Register\", href: \"user/register\", current: false },\r\n    { name: \"Login\", href: \"user/login\", current: true },\r\n  ];\r\n  \r\n  function classNames(...classes: string[]) {\r\n    return classes.filter(Boolean).join(\" \");\r\n  }\r\n  \r\n  function CommonHeader() {\r\n    return (\r\n      <Disclosure as=\"nav\" className=\"bg-foundItBg\">\r\n        {({ open }) => (\r\n          <>\r\n            <div className=\"mx-auto max-w-7xl px-2 sm:px-6 lg:px-8\">\r\n              <div className=\"relative flex h-16 items-center justify-between\">\r\n                <div className=\"absolute inset-y-0 left-0 flex items-center sm:hidden\">\r\n                  {/* Mobile menu button*/}\r\n                  <Disclosure.Button className=\"inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\">\r\n                    <span className=\"sr-only\">Open main menu</span>\r\n                    {open ? (\r\n                      <XMarkIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\r\n                    ) : (\r\n                      <Bars3Icon className=\"block h-6 w-6\" aria-hidden=\"true\" />\r\n                    )}\r\n                  </Disclosure.Button>\r\n                </div>\r\n                <div className=\"flex flex-1 items-center justify-center sm:items-stretch sm:justify-start\">\r\n                  <div className=\"flex flex-shrink-0 items-center\">\r\n                    <img\r\n                      className=\"block h-8 w-auto lg:hidden\"\r\n                      src=\"https://res.cloudinary.com/dpgbodkae/image/upload/v1695012129/found_it-logos_black_wgrai8.png\"\r\n                      \r\n                      alt=\"Your Company\"\r\n                      \r\n\r\n\r\n\r\n\r\n                    />\r\n                    <Link to={\"/\"}>\r\n                      <img\r\n                        className=\"hidden h-12 w-13 lg:block\"\r\n                        src=\"https://res.cloudinary.com/dpgbodkae/image/upload/v1695012129/found_it-logos_black_wgrai8.png\"\r\n                        alt=\"Your Company\"\r\n                      />\r\n                    </Link>\r\n                  </div>\r\n                </div>\r\n                <div className=\"absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0\"></div>\r\n  \r\n                <div className=\"hidden sm:ml-6 sm:block\">\r\n                  <div className=\"flex space-x-4\">\r\n                    {navigation.map((item) => (\r\n                      <a\r\n                        key={item.name}\r\n                        href={item.href}\r\n                        className={classNames(\r\n                          item.current\r\n                            ? \"bg-brown-600 text-white\"\r\n                            : \"text-black hover:bg-brown-500 hover:text-white\",\r\n                          \"rounded-md px-3 py-2 text-sm font-medium\"\r\n                        )}\r\n                        aria-current={item.current ? \"page\" : undefined}\r\n                      >\r\n                        {item.name}\r\n                      </a>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n  \r\n            <Disclosure.Panel className=\"sm:hidden\">\r\n              <div className=\"space-y-1 px-2 pb-3 pt-2\">\r\n                {navigation.map((item) => (\r\n                  <Disclosure.Button\r\n                    key={item.name}\r\n                    as=\"a\"\r\n                    href={item.href}\r\n                    className={classNames(\r\n                      item.current\r\n                        ? \"bg-gray-900 text-white\"\r\n                        : \"text-gray-300 hover:bg-gray-700 hover:text-white\",\r\n                      \"block rounded-md px-3 py-2 text-base font-medium\"\r\n                    )}\r\n                    aria-current={item.current ? \"page\" : undefined}\r\n                  >\r\n                    {item.name}\r\n                  </Disclosure.Button>\r\n                ))}\r\n              </div>\r\n            </Disclosure.Panel>\r\n          </>\r\n        )}\r\n      </Disclosure>\r\n    );\r\n  }\r\n  \r\n  export default CommonHeader;","import axios, { AxiosRequestConfig } from \"axios\";\r\nimport {EmployerRegisterPayload,LoginPayload,NewEmployerRegistrationPayload} from \"../../../../types/PayloadInterface\";\r\nimport apiConfig from \"../../../../utils/apiConfig\";\r\nexport const employerLogin = async (payload: LoginPayload): Promise<any> => {\r\n    try {\r\n      const config: AxiosRequestConfig = {\r\n        url: `${apiConfig.employerLogin}`,\r\n        method: \"post\",\r\n        data: payload,\r\n      };\r\n      const response = await axios(config);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.message === \"Request failed with status code 401\") {\r\n        throw new Error(\"Incorrect email or password !!\");\r\n      } else {\r\n        throw new Error(\"Login failed, try again later\");\r\n      }\r\n    }\r\n  };\r\n  \r\n  export const registerEmployer = async (payload: NewEmployerRegistrationPayload) => {\r\n    try {\r\n      const config: AxiosRequestConfig = {\r\n        url: `${apiConfig.employerRegister}`,\r\n        method: \"post\",\r\n        data: payload,\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      };\r\n      const response = await axios(config);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.message === \"Request failed with status code 409\") {\r\n        throw new Error(\"Email already exists !!!\");\r\n      } else {\r\n        throw new Error(\"Signup failed, try again\");\r\n      }\r\n    }\r\n  };\r\n  \r\n  export const emailVerify = async (email: string) => {\r\n    try {\r\n      const config: AxiosRequestConfig = {\r\n         url: `${apiConfig.emailVerify}/${email}`,\r\n        method: \"get\",\r\n      };\r\n      const response = await axios(config);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.message === \"Request failed with status code 409\") {\r\n        throw new Error(\"Try another email !!!\");\r\n      } else {\r\n        throw new Error(\"verification failed\");\r\n      }\r\n    }\r\n  };\r\n  \r\n  export const OTPVerify = async (OTP: string) => {\r\n    try {\r\n      const config: AxiosRequestConfig = {\r\n         url: `${apiConfig.OTPVerify}/${OTP}`,\r\n        method: \"get\",\r\n      };\r\n      const response = await axios(config);\r\n     console.log(response,\"otp\");\r\n     \r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.message === \"Request failed with status code 400\") {\r\n        throw new Error(\"Invalid OTP !!!\");\r\n      } else {\r\n        throw new Error(\"verification failed\");\r\n      }\r\n    }\r\n  };","import React, { useEffect } from \"react\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { userLoginValidationSchema } from \"../../../utils/validation\";\r\nimport { employerLogin } from \"../../../features/axios/api/employer/employerAuthentication\";\r\nimport { LoginPayload } from \"../../../types/PayloadInterface\";\r\nimport { setEmployerToken } from \"../../../features/axios/redux/slices/employer/employerTokenSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport { employerLoginSuccess } from \"../../../features/axios/redux/slices/employer/employerDetailsSlice\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { RootState } from \"../../../features/axios/redux/reducers/Reducer\";\r\n\r\nfunction EmployerLogin() {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const employerToken = localStorage.getItem('EmployerToken');\r\n  const isLoggedIn = useSelector((state: RootState)=> state.employerDetails.isLoggedIn);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<LoginPayload>({\r\n    resolver: yupResolver(userLoginValidationSchema),\r\n  });\r\n\r\n  const notify = (msg: string, type: string) => {\r\n    type === \"error\"\r\n      ? toast.error(msg, { position: toast.POSITION.TOP_RIGHT })\r\n      : toast.success(msg, { position: toast.POSITION.TOP_RIGHT });\r\n  };\r\n  useEffect(() => {\r\n    if(employerToken) {\r\n      dispatch(employerLoginSuccess());\r\n    }\r\n    if (isLoggedIn === true) {\r\n      navigate('/employer/dashboard');\r\n    }\r\n  })\r\n\r\n  const submitHandler = async (formData: LoginPayload) => {\r\n    employerLogin(formData)\r\n      .then((response) => {\r\n        const token = response.token;\r\n        \r\n        notify(\"Login success\", \"success\");\r\n        setTimeout(() => {\r\n          dispatch(setEmployerToken(token));\r\n          dispatch(employerLoginSuccess());\r\n          navigate('/employer/dashboard');\r\n        }, 2000);\r\n      })\r\n      .catch((error: any) => {\r\n        notify(error.message, \"error\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\" flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8\">\r\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <h2 className=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900\">\r\n            Sign in to your account\r\n          </h2>\r\n        </div>\r\n\r\n        <div className=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <form className=\"space-y-6\" onSubmit={handleSubmit(submitHandler)}>\r\n            <div>\r\n              <label\r\n                htmlFor=\"email\"\r\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n              >\r\n                Email address\r\n              </label>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  placeholder=\"Email\"\r\n                  {...register(\"email\")}\r\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:border-brown-500\"\r\n                />\r\n                {errors.email && (\r\n                  <p className=\"text-red-500 text-sm\">{errors.email.message}</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <div className=\"flex items-center justify-between\">\r\n                <label\r\n                  htmlFor=\"password\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Password\r\n                </label>\r\n                \r\n              </div>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  {...register(\"password\")}\r\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:border-brown-500\"    \r\n                />\r\n                {errors.password && (\r\n                  <p className=\"text-red-500 text-sm\">\r\n                    {errors.password.message}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"flex w-full justify-center rounded-md bg-brown-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-brown-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brown-600\"\r\n              >\r\n                Sign in\r\n              </button>\r\n            </div>\r\n          </form>\r\n\r\n          <p className=\"mt-10 text-center text-sm text-gray-500\">\r\n            Not a member?{\" \"}\r\n            <Link to={\"/employer/register\"}>\r\n              <span className=\"font-semibold leading-6 text-brown-600 hover:text-brown-500\">\r\n                SignUp\r\n              </span>\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <ToastContainer/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EmployerLogin;","import EmployerLogin from \"../../Components/Employer/EmployerAuth/EmployerLogin\";\r\n\r\nconst EmployerLoginPage = () => {\r\n    return (\r\n        <div>\r\n            <EmployerLogin/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmployerLoginPage;","import { useState } from 'react';\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { emailVerify } from '../../../features/axios/api/employer/employerAuthentication';\r\nimport { employerEmail } from '../../../features/axios/redux/slices/employer/employerDetailsSlice';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nfunction EmailVerify() {\r\n  const [email, setEmail] = useState('');\r\n  const [isValidEmail, setIsValidEmail] = useState(true);\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const notify = (msg: string, type: string) => {\r\n    type === \"error\"\r\n      ? toast.error(msg, { position: toast.POSITION.BOTTOM_RIGHT })\r\n      : toast.success(msg, { position: toast.POSITION.TOP_RIGHT });\r\n  };\r\n\r\n  const handleSubmit = (e:any) => {\r\n    e.preventDefault();\r\n\r\n    // Validate email using regex\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      setIsValidEmail(false);\r\n      return;\r\n    }\r\n\r\n    // Call the emailVerify function with the email value\r\n    emailVerify(email)\r\n      .then(() => {\r\n        // Handle the response\r\n        dispatch(employerEmail(email));\r\n        navigate('/employer/register/OTP');\r\n      })\r\n      .catch((error) => {\r\n        // Handle the error\r\n        notify(error?.message, 'error');\r\n      });\r\n  };\r\n\r\n  const handleEmailChange = (e:any) => {\r\n    setEmail(e.target.value);\r\n    setIsValidEmail(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex min-h-full flex-1 flex-col justify-center px-6 py-20 lg:px-8\">\r\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <h2 className=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900\">\r\n            Verify your email\r\n          </h2>\r\n        </div>\r\n\r\n        <div className=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <form className=\"space-y-6\" onSubmit={handleSubmit}>\r\n            <div>\r\n              <label\r\n                htmlFor=\"email\"\r\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n              >\r\n                Email address\r\n              </label>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  placeholder=\"Email\"\r\n                  value={email}\r\n                  onChange={handleEmailChange}\r\n                  className={`w-full px-4 py-2 border ${\r\n                    isValidEmail ? 'border-gray-300' : 'border-red-500'\r\n                  } rounded focus:outline-none ${\r\n                    isValidEmail ? 'focus:border-brown-500' : 'focus:border-red-500'\r\n                  }`}\r\n                />\r\n                {!isValidEmail && (\r\n                  <p className=\"text-red-500 text-xs mt-1\">\r\n                    Please enter a valid email address.\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"flex w-full justify-center rounded-md bg-brown-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-brown-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brown-600\"\r\n              >\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <ToastContainer/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EmailVerify;","import EmailVerify from \"../../Components/Employer/EmployerAuth/EmailVerify\";\r\nimport CommonHeader from \"../../Components/Header/CommonHeader\";\r\nfunction EmailVerifyPage() {\r\n  return (\r\n    <div>\r\n      <CommonHeader />\r\n      <EmailVerify />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmailVerifyPage;","import React from \"react\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { employerRegisterValidationSchema } from \"../../../utils/validation\";\r\nimport { registerEmployer } from \"../../../features/axios/api/employer/employerAuthentication\";\r\nimport { EmployerRegisterPayload } from \"../../../types/PayloadInterface\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../features/axios/redux/reducers/Reducer\";\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport { any } from \"prop-types\";\r\n\r\nfunction EmployerRegister() {\r\n  const navigate = useNavigate();\r\n  const employerEmail = useSelector(\r\n    (state: RootState) => state.employerDetails.employerEmail\r\n  );\r\n  // to remove after using formik\r\n  // const {\r\n  //   register,\r\n  //   handleSubmit,\r\n  //   formState: { errors },\r\n  // } = useForm<EmployerRegisterPayload>({\r\n  //   resolver: yupResolver(employerRegisterValidationSchema as any),\r\n  // });\r\n\r\n  const formik = useFormik<EmployerRegisterPayload>({\r\n    initialValues: {\r\n      _id:\"\",\r\n      companyName: \"\",\r\n      industry: \"\",\r\n      location: \"\",\r\n      idProof_img: null,\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      image: \"\",\r\n      about: \"\",\r\n      isVerified: false,\r\n      email: \"\",\r\n    },\r\n    validationSchema: employerRegisterValidationSchema,\r\n    onSubmit: (values) => {\r\n      const {_id, ...payload} = values\r\n      registerEmployer({...payload})\r\n          .then((response) => {\r\n            notify(\"Registration success\", \"success\");\r\n            setTimeout(() => {\r\n              navigate(\"/employer/login\");\r\n            }, 2000);\r\n          })\r\n          .catch((error: any) => {\r\n            notify(error.message, \"error\");\r\n          });\r\n    },\r\n  });\r\n\r\n  React.useEffect(() =>{\r\n    formik.setFieldValue(\"email\", employerEmail);\r\n  }, []);\r\n\r\n\r\n  const notify = (msg: string, type: string) => {\r\n    type === \"error\"\r\n      ? toast.error(msg, { position: toast.POSITION.TOP_RIGHT })\r\n      : toast.success(msg, { position: toast.POSITION.TOP_RIGHT });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex min-h-screen flex-1 flex-col justify-center px-6 py-12 lg:px-8\">\r\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <img className=\"mx-auto h-10 w-auto\" src=\"https://res.cloudinary.com/dpgbodkae/image/upload/v1695012129/found_it-logos_black_wgrai8.png\" alt=\"Your Company\" />\r\n          <h2 className=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900\">\r\n            Create your account\r\n          </h2>\r\n        </div>\r\n  \r\n        <div className=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <form className=\"space-y-6\" onSubmit={formik.handleSubmit}>\r\n            <div>\r\n              <label\r\n                htmlFor=\"companyName\"\r\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n              >\r\n                Company Name\r\n              </label>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"companyName\"\r\n                  type=\"text\"\r\n                  placeholder=\"Company Name\"\r\n                  {...formik.getFieldProps(\"companyName\")}\r\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:border-brown-500\"\r\n                />\r\n                {formik.errors.companyName && (\r\n                  <p className=\"text-red-500 text-sm\">\r\n                    {formik.errors.companyName}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n  \r\n            <div>\r\n              <label\r\n                htmlFor=\"industry\"\r\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n              >\r\n                Industry\r\n              </label>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"industry\"\r\n                  type=\"text\"\r\n                  placeholder=\"Industry Name\"\r\n                  {...formik.getFieldProps(\"industry\")}\r\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:border-brown-500\"\r\n                />\r\n                {formik.errors.industry && (\r\n                  <p className=\"text-red-500 text-sm\">\r\n                    {formik.errors.industry}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n  \r\n            <div>\r\n              <label\r\n                htmlFor=\"idProof_img\"\r\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n              >\r\n                ID Proof\r\n              </label>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  type=\"file\"\r\n                  id=\"idProof_img\"\r\n                  onChange={(event) => {\r\n                    const selectedFile = event.currentTarget.files?.[0];\r\n                    if (selectedFile) {\r\n                      formik.setFieldValue(\"idProof_img\", selectedFile);\r\n                    }\r\n                  }}\r\n                  placeholder=\"Please select ID proof\"\r\n                />\r\n                {formik.errors.idProof_img && (\r\n                  <p className=\"text-red-500 text-sm\">\r\n                    {formik.errors.idProof_img}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n  \r\n            <div>\r\n              <label\r\n                htmlFor=\"location\"\r\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n              >\r\n                Location\r\n              </label>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"location\"\r\n                  type=\"text\"\r\n                  placeholder=\"Location\"\r\n                  {...formik.getFieldProps(\"location\")}\r\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:border-brown-500\"\r\n                />\r\n                {formik.errors.location && (\r\n                  <p className=\"text-red-500 text-sm\">\r\n                    {formik.errors.location}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n  \r\n            <div>\r\n              <label\r\n                htmlFor=\"password\"\r\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n              >\r\n                Password\r\n              </label>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  {...formik.getFieldProps(\"password\")}\r\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:border-brown-500\"\r\n                />\r\n                {formik.errors.password && (\r\n                  <p className=\"text-red-500 text-sm\">\r\n                    {formik.errors.password}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n  \r\n            <div>\r\n              <label\r\n                htmlFor=\"confirmPassword\"\r\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n              >\r\n                Confirm Password\r\n              </label>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"confirmPassword\"\r\n                  type=\"password\"\r\n                  placeholder=\"Confirm password\"\r\n                  {...formik.getFieldProps(\"confirmPassword\")}\r\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:border-brown-500\"\r\n                />\r\n                {formik.errors.confirmPassword && (\r\n                  <p className=\"text-red-500 text-sm\">\r\n                    {formik.errors.confirmPassword}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n  \r\n            <div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"flex w-full justify-center rounded-md bg-brown-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-brown-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brown-600\"\r\n              >\r\n                Sign Up\r\n              </button>\r\n            </div>\r\n          </form>\r\n  \r\n          <p className=\"mt-10 text-center text-sm text-gray-500\">\r\n            Already have an account?{\" \"}\r\n            <Link to=\"/employer/login\" className=\"font-semibold leading-6 text-brown-600 hover:text-brown-500\">\r\n              Sign In\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EmployerRegister;\r\n","import EmployerRegister from \"../../Components/Employer/EmployerAuth/EmployerRegister\";\r\n\r\nfunction EmployerRegisterPage() {\r\n  return (\r\n    <div>\r\n      <EmployerRegister />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployerRegisterPage;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { OTPVerify } from \"../../../features/axios/api/employer/employerAuthentication\";\r\nimport { Spinner } from \"@material-tailwind/react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction EmailOTP() {\r\n  const [timer, setTimer] = useState(120);\r\n  const [otpDigits, setOtpDigits] = useState([\"\", \"\", \"\", \"\", \"\", \"\"]);\r\n  const [submitted, setSubmitted] = useState<boolean>(false);\r\n  const inputRefs = useRef<any>([]);\r\n  const navigate = useNavigate();\r\n\r\n  console.log(\"otpDigits\",otpDigits);\r\n  console.log(\"inputRef\", inputRefs)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setTimer((prevTimer) => prevTimer - 1);\r\n    }, 1000);\r\n    // Clear the interval when the timer reaches 0\r\n    if (timer === 0) {\r\n      clearInterval(interval);\r\n    }\r\n    // Clean up the interval on component unmount\r\n    return () => clearInterval(interval);\r\n  }, [timer]);\r\n\r\n  const notify = (msg: string, type: string) => {\r\n    type === \"error\"\r\n      ? toast.error(msg, { position: toast.POSITION.TOP_RIGHT })\r\n      : toast.success(msg, { position: toast.POSITION.TOP_RIGHT });\r\n  };\r\n\r\n  const handleOtpChange = (index: any, value: any) => {\r\n    const updatedOtpDigits = [...otpDigits];\r\n    updatedOtpDigits[index] = value;\r\n    setOtpDigits(updatedOtpDigits);\r\n\r\n    if (value !== \"\" && index < otpDigits.length - 1) {\r\n      inputRefs.current[index + 1].focus();\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (index: any, event: any) => {\r\n    if (event.key === \"Backspace\" && index > 0 && otpDigits[index] === \"\") {\r\n      inputRefs.current[index - 1].focus();\r\n    }\r\n  };\r\n\r\n  const handleOtpSubmit = async () => {\r\n    const otpString = otpDigits.join(\"\");\r\n    try {\r\n      setSubmitted(true);\r\n      const response = await OTPVerify(otpString);\r\n      if (response) {\r\n        setTimeout(() => {\r\n          notify(\"Email verified\", \"success\");\r\n        }, 1500);\r\n        setTimeout(() => {\r\n          navigate('/employer/register/form')\r\n        }, 3000);\r\n      }\r\n    } catch (error: any) {\r\n      setTimeout(() => {\r\n        notify(error.message, \"error\");\r\n        setSubmitted(false)\r\n      }, 1500);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-screen py-20 px-3 mt-16\">\r\n      <div className=\"container mx-auto\">\r\n        <div className=\"max-w-sm mx-auto md:max-w-lg\">\r\n          <div className=\"w-full\">\r\n            <div className=\"shadow-xl h-11/12  py-3 rounded text-center\">\r\n              <h1 className=\"text-2xl font-bold\">OTP Verification</h1>\r\n              <div className=\"flex flex-col mt-4\">\r\n                <span>Enter the OTP you received at</span>\r\n                <span className=\"font-bold\">your email</span>\r\n              </div>\r\n\r\n              <div\r\n                id=\"otp\"\r\n                className=\"flex flex-row justify-center text-center px-2 mt-5\"\r\n              >\r\n                \r\n                {otpDigits.map((digit, index) => (\r\n                  <input\r\n                    key={index}\r\n                    ref={(ref) => (inputRefs.current[index] = ref)}\r\n                    className=\"m-2 border border-brown-700 h-10 w-10 text-center form-control rounded\"\r\n                    type=\"text\"\r\n                    value={digit}\r\n                    maxLength={1}\r\n                    onChange={(e) => handleOtpChange(index, e.target.value)}\r\n                    onKeyDown={(e) => handleKeyDown(index, e)}\r\n                  />\r\n                ))}\r\n              </div>\r\n\r\n              <div className=\"flex justify-center text-center mt-5\">\r\n                {timer > 0 ? (\r\n                  <div className=\"flex items-center flex-col\">\r\n                    <p className=\"font-bold text-gray-500\">\r\n                      Time Remaining: {Math.floor(timer / 60)}:\r\n                      {timer % 60 < 10 ? \"0\" : \"\"}\r\n                      {timer % 60}\r\n                    </p>\r\n                    {!submitted ? (\r\n                      <button\r\n                        className=\" btn p-1 w-3/4 mt-2 text-sm items-center text-white cursor-pointer bg-brown-600 rounded-lg\"\r\n                        onClick={handleOtpSubmit}\r\n                      >\r\n                        Submit\r\n                      </button>\r\n                    ) : (\r\n                      <Spinner />\r\n                    )}\r\n                  </div>\r\n                ) : (\r\n                  <div></div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmailOTP;","import EmailOTP from \"../../Components/Employer/EmployerAuth/EmailOTP\"\r\nimport CommonHeader from \"../../Components/Header/CommonHeader\"\r\n\r\nfunction EmailOTPPage() {\r\n  return (\r\n    <div>\r\n      <CommonHeader/>\r\n      <EmailOTP/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EmailOTPPage","import { Routes, Route } from \"react-router-dom\";\r\nimport EmployerLoginPage from \"../../pages/employer/EmployerLoginPage\";\r\n import EmployerHomePage from \"../../pages/employer/EmployerHomePage\";\r\nimport EmailVerifyPage from \"../../pages/employer/EmailVerifyPage\";\r\nimport EmployerRegisterPage from \"../../pages/employer/EmployerRegisterPage\";\r\n import EmailOTPPage from \"../../pages/employer/EmailOTPPage\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../features/axios/redux/reducers/Reducer\";\r\n\r\nconst EmployerRouter = () => {\r\n    const employerEmail = useSelector((state: RootState) => state.employerDetails.employerEmail);\r\n    return (\r\n        <div>\r\n            <Routes>\r\n                <Route path=\"/*\" element ={<EmployerHomePage/>}/>\r\n                <Route path=\"/login\" element={<EmployerLoginPage/>}/>\r\n                <Route path=\"/register\" element={<EmailVerifyPage/>}/>\r\n                <Route path=\"/register/form\" element={employerEmail ? <EmployerRegisterPage/> : <EmailVerifyPage/>}/>\r\n                {/* <Route path=\"/register/form\" element={<EmployerRegisterPage/>}/> */}\r\n                <Route path=\"/register/OTP\" element={employerEmail ? <EmailOTPPage/> : <EmailVerifyPage/>}/>\r\n            </Routes>\r\n        </div>\r\n    )\r\n}\r\nexport default EmployerRouter;","import * as yup from \"yup\";\r\n\r\nexport const userRegisterValidationSchema = yup.object().shape({\r\n    name: yup\r\n      .string()\r\n      .required(\"Name is required\")\r\n      .matches(/^[a-zA-Z][a-zA-Z ]+[a-zA-Z]*$/, \"Enter a valid name\"),\r\n    email: yup.string().required(\"Email is required\").email(\"Invalid email\"),\r\n    phone: yup\r\n      .string()\r\n      .required(\"Phone is required\")\r\n      .matches(/^\\d{10}$/, \"Enter a valid 10-digit phone number\"),\r\n    password: yup\r\n      .string()\r\n      .required(\"Password is required\")\r\n      .min(6, \"Password must be at least 6 characters long\"),\r\n    confirmPassword: yup\r\n      .string()\r\n      .oneOf([yup.ref(\"password\")], \"Password does not match\"),\r\n  });\r\n  export const userLoginValidationSchema = yup.object().shape({\r\n    email: yup.string().required(\"Email is required\").email(\"Invalid email\"),\r\n    password: yup\r\n      .string()\r\n      .required(\"Password is required\")\r\n      .min(6, \"Password must be at least 6 characters long\"),\r\n  });\r\n\r\n  export const employerRegisterValidationSchema = yup.object().shape({\r\n    companyName: yup\r\n      .string()\r\n      .required(\"Name is required\")\r\n      .matches(/^[a-zA-Z][a-zA-Z ]+[a-zA-Z]*$/, \"Enter a valid name\"),\r\n    email: yup.string().required(\"Email is required\").email(\"Invalid email\"),\r\n    industry: yup.string().required(\"Industry is required\")\r\n    .matches(/^[a-zA-Z][a-zA-Z ]+[a-zA-Z]*$/, \"Enter a valid name\"),\r\n    location: yup.string().required(\"Location is required\")\r\n    .matches(/^[a-zA-Z][a-zA-Z ]+[a-zA-Z]*$/, \"Enter a valid name\"),\r\n    idProof_img: yup.mixed()\r\n  .required('Image is required') // Check if the field is required\r\n  .test('fileType', 'Only JPEG and PNG images are allowed', (value: any) => {\r\n    if (!value) return true; // Skip validation if no file is selected\r\n    return (\r\n      value && (value.type === 'image/jpeg' || value.type === 'image/png')\r\n    );\r\n  })\r\n  .test('fileSize', 'Image size exceeds the maximum allowed (5MB)', (value: any) => {\r\n    if (!value) return true; // Skip validation if no file is selected\r\n    return value && value.size <= 5 * 1024 * 1024; // 5MB\r\n  }),\r\n    password: yup\r\n      .string()\r\n      .required(\"Password is required\")\r\n      .min(6, \"Password must be at least 6 characters long\"),\r\n    confirmPassword: yup\r\n      .string()\r\n      .oneOf([yup.ref(\"password\")], \"Password does not match\"),\r\n  });\r\n  export const jobCreationValidationSchema = yup.object().shape({\r\n    title: yup.string()\r\n    .required(\"job title is requied is required\")\r\n    .matches(/^[A-Za-z]/, \"Job title must start with a letter\"),\r\n    description: yup.string().required(\"Job Description is required\"),\r\n    \r\n    location: yup.string().required(\"Location is required\")\r\n    .matches(/^[A-Za-z]/, \" description must start with a letter\"),\r\n    employmentType: yup.string().required(\"Employment Type is required\"),\r\n    requirements: yup\r\n      .mixed()\r\n      .test(\r\n        \"isArrayOrString\",\r\n        \"Requirements must be an array or a string\",\r\n        function (value) {\r\n          const { createError, path } = this;\r\n          if (Array.isArray(value) || typeof value === \"string\") {\r\n            return true;\r\n          }\r\n          return createError({\r\n            path,\r\n            message: \"Requirements must be an array or a string\",\r\n          });\r\n        }\r\n      )\r\n      .required(\"At least one requirement is required\"),\r\n    responsibilities: yup\r\n      .mixed()\r\n      .test(\r\n        \"isArrayOrString\",\r\n        \"Responsibilities must be an array or a string\",\r\n        function (value) {\r\n          const { createError, path } = this;\r\n          if (Array.isArray(value) || typeof value === \"string\") {\r\n            return true;\r\n          }\r\n          return createError({\r\n            path,\r\n            message: \"Responsibilities must be an array or a string\",\r\n          });\r\n        }\r\n      )\r\n      .required(\"At least one responsibility is required\"),\r\n    salary: yup\r\n      .number()\r\n      .required(\"Salary is required\")\r\n      .positive(\"Salary must be a positive number\"),\r\n    openings: yup\r\n      .number()\r\n      .required(\"Openings is required\")\r\n      .integer(\"Openings must be an integer\")\r\n      .positive(\"Openings must be a positive number\"),\r\n  });\r\n  export const jobUpdateValidationSchema = yup.object().shape({\r\n    title: yup.string().required(\"Job Title is required\"),\r\n    description: yup.string().required(\"Job Description is required\"),\r\n    location: yup.string().required(\"Location is required\"),\r\n    employmentType: yup.string().required(\"Employment Type is required\"),\r\n    requirements: yup\r\n      .mixed()\r\n      .test(\r\n        \"isArrayOrString\",\r\n        \"Requirements must be an array or a string\",\r\n        function (value) {\r\n          const { createError, path } = this;\r\n          if (Array.isArray(value) || typeof value === \"string\") {\r\n            return true;\r\n          }\r\n          return createError({\r\n            path,\r\n            message: \"Requirements must be an array or a string\",\r\n          });\r\n        }\r\n      )\r\n      .required(\"At least one requirement is required\"),\r\n    responsibilities: yup\r\n      .mixed()\r\n      .test(\r\n        \"isArrayOrString\",\r\n        \"Responsibilities must be an array or a string\",\r\n        function (value) {\r\n          const { createError, path } = this;\r\n          if (Array.isArray(value) || typeof value === \"string\") {\r\n            return true;\r\n          }\r\n          return createError({\r\n            path,\r\n            message: \"Responsibilities must be an array or a string\",\r\n          });\r\n        }\r\n      )\r\n      .required(\"At least one responsibility is required\"),\r\n    salary: yup\r\n      .number()\r\n      .required(\"Salary is required\")\r\n      .positive(\"Salary must be a positive number\"),\r\n    openings: yup\r\n      .number()\r\n      .required(\"Openings is required\")\r\n      .integer(\"Openings must be an integer\")\r\n      .positive(\"Openings must be a positive number\"),\r\n  });\r\n  "],"names":["navigation","name","href","current","classNames","_len","arguments","length","classes","Array","_key","filter","Boolean","join","_jsx","Disclosure","as","className","children","_ref","open","_jsxs","_Fragment","Button","XMarkIcon","Bars3Icon","src","alt","Link","to","map","item","undefined","Panel","employerLogin","_asyncToGenerator","_regeneratorRuntime","mark","_callee","payload","config","response","wrap","_context","prev","next","url","concat","apiConfig","method","data","axios","sent","abrupt","t0","message","Error","stop","_x","apply","registerEmployer","_ref2","_callee2","_context2","employerRegister","headers","_x2","emailVerify","_ref3","_callee3","email","_context3","_x3","OTPVerify","_ref4","_callee4","OTP","_context4","console","log","_x4","navigate","useNavigate","dispatch","useDispatch","employerToken","localStorage","getItem","isLoggedIn","useSelector","state","employerDetails","_useForm","useForm","resolver","yupResolver","userLoginValidationSchema","register","handleSubmit","errors","formState","notify","msg","type","toast","error","position","POSITION","TOP_RIGHT","success","useEffect","employerLoginSuccess","submitHandler","formData","then","token","setTimeout","setEmployerToken","catch","onSubmit","htmlFor","_objectSpread","id","placeholder","password","ToastContainer","EmployerLogin","_useState","useState","_useState2","_slicedToArray","setEmail","_useState3","_useState4","isValidEmail","setIsValidEmail","e","preventDefault","test","employerEmail","BOTTOM_RIGHT","value","onChange","target","CommonHeader","EmailVerify","formik","useFormik","initialValues","_id","companyName","industry","location","idProof_img","confirmPassword","image","about","isVerified","validationSchema","employerRegisterValidationSchema","values","_objectWithoutProperties","_excluded","React","setFieldValue","getFieldProps","event","_event$currentTarget$","selectedFile","currentTarget","files","EmployerRegister","timer","setTimer","otpDigits","setOtpDigits","_useState5","_useState6","submitted","setSubmitted","inputRefs","useRef","interval","setInterval","prevTimer","clearInterval","handleOtpSubmit","otpString","digit","index","ref","maxLength","updatedOtpDigits","_toConsumableArray","focus","handleOtpChange","onKeyDown","key","handleKeyDown","Math","floor","Spinner","onClick","EmailOTP","Routes","Route","path","element","EmployerHomePage","EmployerLoginPage","EmailVerifyPage","EmployerRegisterPage","EmailOTPPage","userRegisterValidationSchema","yup","shape","required","matches","phone","min","oneOf","size","jobCreationValidationSchema","title","description","employmentType","requirements","createError","this","isArray","responsibilities","salary","positive","openings","integer","jobUpdateValidationSchema"],"sourceRoot":""}